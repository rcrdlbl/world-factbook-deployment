{"ast":null,"code":"import { abs, atan2, cos, exp, halfPi, log, pow, sin, sqrt } from \"./math\";\nexport function complexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)), -0.25 * log(t * t + 4 * x2) + 0.5 * log(y_1 * y_1 + x2)];\n}\nexport function complexDivide(a, b) {\n  if (b[1]) a = complexMul(a, [b[0], -b[1]]), b = complexNorm2(b);else b = b[0];\n  return [a[0] / b, a[1] / b];\n}\nexport function complexMul(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]];\n}\nexport function complexAdd(a, b) {\n  return [a[0] + b[0], a[1] + b[1]];\n}\nexport function complexSub(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\nexport function complexNorm2(a) {\n  return a[0] * a[0] + a[1] * a[1];\n}\nexport function complexNorm(a) {\n  return sqrt(complexNorm2(a));\n}\nexport function complexLogHypot(a, b) {\n  var _a = abs(a),\n      _b = abs(b);\n\n  if (a === 0) return log(_b);\n  if (b === 0) return log(_a);\n  if (_a < 3000 && _b < 3000) return log(a * a + b * b) * 0.5;\n  return log(a / cos(atan2(b, a)));\n} // adapted from https://github.com/infusion/Complex.js\n\nexport function complexPow(a, n) {\n  var b = a[1],\n      arg,\n      loh;\n  a = a[0];\n  if (a === 0 && b === 0) return [0, 0];\n  if (typeof n === \"number\") n = [n, 0];\n\n  if (!n[1]) {\n    if (b === 0 && a >= 0) {\n      return [pow(a, n[0]), 0];\n    } else if (a === 0) {\n      switch ((n[1] % 4 + 4) % 4) {\n        case 0:\n          return [pow(b, n[0]), 0];\n\n        case 1:\n          return [0, pow(b, n[0])];\n\n        case 2:\n          return [-pow(b, n[0]), 0];\n\n        case 3:\n          return [0, -pow(b, n[0])];\n      }\n    }\n  }\n\n  arg = atan2(b, a);\n  loh = complexLogHypot(a, b);\n  a = exp(n[0] * loh - n[1] * arg);\n  b = n[1] * loh + n[0] * arg;\n  return [a * cos(b), a * sin(b)];\n}","map":null,"metadata":{},"sourceType":"module"}