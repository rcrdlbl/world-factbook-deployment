{"ast":null,"code":"import { geoCentroid as centroid, geoGnomonic as gnomonic, geoDistance as distance } from \"d3-geo\";\nimport { degrees } from \"../math\";\nimport polyhedral from \"./index\";\nexport default function (parents, polygons, faceProjection, find) {\n  parents = parents || [];\n  polygons = polygons || {\n    features: []\n  };\n  find = find || find0; // it is possible to pass a specific projection on each face\n  // by default is is a gnomonic projection centered on the face's centroid\n  // scale 1 by convention\n\n  faceProjection = faceProjection || function (face) {\n    return gnomonic().scale(1).translate([0, 0]).rotate([-face.site[0], -face.site[1]]);\n  };\n\n  var faces = [];\n\n  function build_tree() {\n    // the faces from the polyhedron each yield\n    // - face: its vertices\n    // - site: its voronoi site (default: centroid)\n    // - project: local projection on this face\n    faces = polygons.features.map(function (feature, i) {\n      var polygon = feature.geometry.coordinates[0];\n      var face = polygon.slice(0, -1);\n      face.site = feature.properties && feature.properties.sitecoordinates ? feature.properties.sitecoordinates : centroid(feature.geometry);\n      return {\n        face: face,\n        site: face.site,\n        id: i,\n        project: faceProjection(face)\n      };\n    }); // Build a tree of the faces, starting with face 0 (North Pole)\n    // which has no parent (-1)\n\n    parents.forEach(function (d, i) {\n      var node = faces[d];\n      node && (node.children || (node.children = [])).push(faces[i]);\n    });\n  } // a basic function to find the polygon that contains the point\n\n\n  function find0(lambda, phi) {\n    var d0 = Infinity;\n    var found = -1;\n\n    for (var i = 0; i < faces.length; i++) {\n      var d = distance(faces[i].site, [lambda, phi]);\n\n      if (d < d0) {\n        d0 = d;\n        found = i;\n      }\n    }\n\n    return found;\n  }\n\n  function faceFind(lambda, phi) {\n    return faces[find(lambda * degrees, phi * degrees)];\n  }\n\n  var p = gnomonic();\n\n  function reset() {\n    var rotate = p.rotate(),\n        translate = p.translate(),\n        center = p.center(),\n        scale = p.scale(),\n        angle = p.angle();\n\n    if (faces.length) {\n      p = polyhedral(faces[0], faceFind);\n    }\n\n    p.parents = function (_) {\n      if (!arguments.length) return parents;\n      parents = _;\n      build_tree();\n      return reset();\n    };\n\n    p.polygons = function (_) {\n      if (!arguments.length) return polygons;\n      polygons = _;\n      build_tree();\n      return reset();\n    };\n\n    p.faceProjection = function (_) {\n      if (!arguments.length) return faceProjection;\n      faceProjection = _;\n      build_tree();\n      return reset();\n    };\n\n    p.faceFind = function (_) {\n      if (!arguments.length) return find;\n      find = _;\n      return reset();\n    };\n\n    return p.rotate(rotate).translate(translate).center(center).scale(scale).angle(angle);\n  }\n\n  build_tree();\n  return reset();\n}","map":null,"metadata":{},"sourceType":"module"}