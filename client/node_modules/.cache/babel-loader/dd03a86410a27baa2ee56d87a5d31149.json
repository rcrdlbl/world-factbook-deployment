{"ast":null,"code":"import { asin, atan2, cos, degrees, epsilon2, radians, sin, sqrt } from \"./math\";\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\nexport function sphericalDegrees(cartesian) {\n  var c = spherical(cartesian);\n  return [c[0] * degrees, c[1] * degrees];\n}\nexport function cartesian(spherical) {\n  var lambda = spherical[0],\n      phi = spherical[1],\n      cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\nexport function cartesianDegrees(spherical) {\n  return cartesian([spherical[0] * radians, spherical[1] * radians]);\n}\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n} // TODO return a\n\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n} // TODO return d\n\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\nexport function cartesianEqual(a, b) {\n  var dx = b[0] - a[0],\n      dy = b[1] - a[1],\n      dz = b[2] - a[2];\n  return dx * dx + dy * dy + dz * dz < epsilon2 * epsilon2;\n}","map":null,"metadata":{},"sourceType":"module"}