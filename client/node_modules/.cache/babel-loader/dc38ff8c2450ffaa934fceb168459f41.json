{"ast":null,"code":"import _classCallCheck from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/daniel/Development/world-factbook/src/containers/CountryContainer.js\";\nimport React, { Component } from 'react';\nimport CountryBasic from '../components/CountryBasic';\nimport WikiView from '../components/WikiView';\nimport countryNames from '../static/country-names';\n\nvar CountryContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CountryContainer, _Component);\n\n  function CountryContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CountryContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CountryContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      countryInfo: [],\n      wikiInfo: [],\n      countryInfoLoaded: false\n    };\n\n    _this.findCountryName = function () {\n      var found = countryNames.filter(function (country) {\n        return country['alpha-3'] === this.props.match.params.countryId;\n      });\n      debugger;\n    };\n\n    _this.fetchWikiData = function () {\n      if (_this.props.wikiInfo.data) {}\n\n      var countryName = _this.state.countryInfo.name;\n      fetch(\"https://en.wikipedia.org/w/api.php?&origin=*&format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=\".concat(countryName)).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this.setState({\n          wikiInfo: data\n        });\n      });\n    };\n\n    _this.fetchData = function () {\n      var countryId = _this.props.match.params.countryId;\n      fetch(\"https://restcountries.eu/rest/v2/alpha/\".concat(countryId)).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this.setState({\n          countryInfo: data,\n          countryInfoLoaded: true\n        });\n      });\n    };\n\n    _this.checkWikiInfo = function () {\n      if (_this.state.wikiInfo !== []) {\n        return \"Wiki Info Loading\";\n      } else {\n        return _this.state.wikiInfo.query.pages[Object.keys(_this.state.wikiInfo.query.pages)[0]].extract;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(CountryContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.findCountryName();\n      this.fetchData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.fetchData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(CountryBasic, {\n        countryInfo: this.state.countryInfo,\n        fetchWikiData: this.fetchWikiData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(WikiView, {\n        wikiInfo: this.state.wikiInfo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CountryContainer;\n}(Component); // TODO: make wikipedia component\n\n\nexport default CountryContainer;","map":{"version":3,"sources":["/Users/daniel/Development/world-factbook/src/containers/CountryContainer.js"],"names":["React","Component","CountryBasic","WikiView","countryNames","CountryContainer","state","countryInfo","wikiInfo","countryInfoLoaded","findCountryName","found","filter","country","props","match","params","countryId","fetchWikiData","data","countryName","name","fetch","then","response","json","setState","fetchData","checkWikiInfo","query","pages","Object","keys","extract"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;IAGMC,gB;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE,EADP;AAENC,MAAAA,QAAQ,EAAE,EAFJ;AAGNC,MAAAA,iBAAiB,EAAE;AAHb,K;;UAMRC,e,GAAkB,YAAM;AACtB,UAAMC,KAAK,GAAGP,YAAY,CAACQ,MAAb,CACZ,UAASC,OAAT,EAAkB;AAAC,eAAOA,OAAO,CAAC,SAAD,CAAP,KAAuB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,SAAtD;AAAgE,OADvE,CAAd;AAGA;AACD,K;;UAWDC,a,GAAgB,YAAM;AACpB,UAAI,MAAKJ,KAAL,CAAWN,QAAX,CAAoBW,IAAxB,EAA8B,CAE7B;;AACC,UAAMC,WAAW,GAAG,MAAKd,KAAL,CAAWC,WAAX,CAAuBc,IAA3C;AACAC,MAAAA,KAAK,sIAA+HF,WAA/H,EAAL,CACCG,IADD,CACM,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OADd,EAECF,IAFD,CAEM,UAAAJ,IAAI,EAAI;AACZ,cAAKO,QAAL,CAAc;AACZlB,UAAAA,QAAQ,EAAEW;AADE,SAAd;AAGD,OAND;AAOH,K;;UAEDQ,S,GAAY,YAAM;AAChB,UAAMV,SAAS,GAAG,MAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,SAA1C;AACAK,MAAAA,KAAK,kDAA2CL,SAA3C,EAAL,CAA6DM,IAA7D,CAAkE,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAA1E,EAA+FF,IAA/F,CAAoG,UAAAJ,IAAI,EAAI;AAC1G,cAAKO,QAAL,CAAc;AACZnB,UAAAA,WAAW,EAAEY,IADD;AAEZV,UAAAA,iBAAiB,EAAE;AAFP,SAAd;AAID,OALD;AAMD,K;;UAEDmB,a,GAAgB,YAAM;AACpB,UAAI,MAAKtB,KAAL,CAAWE,QAAX,KAAwB,EAA5B,EAAgC;AAC9B,eAAO,mBAAP;AACD,OAFD,MAEO;AACL,eAAO,MAAKF,KAAL,CAAWE,QAAX,CAAoBqB,KAApB,CAA0BC,KAA1B,CAAgCC,MAAM,CAACC,IAAP,CAAY,MAAK1B,KAAL,CAAWE,QAAX,CAAoBqB,KAApB,CAA0BC,KAAtC,EAA6C,CAA7C,CAAhC,EAAiFG,OAAxF;AACD;AACF,K;;;;;;;wCAvCmB;AAClB,WAAKvB,eAAL;AACA,WAAKiB,SAAL;AACD;;;yCAEoB;AACnB,WAAKA,SAAL;AACD;;;6BAkCQ;AACP,aACE,0CACA,oBAAC,YAAD;AAAc,QAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWC,WAAtC;AAAmD,QAAA,aAAa,EAAE,KAAKW,aAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAEA,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWE,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CADF;AAMD;;;;EA9D4BP,S,GAgE/B;;;AAEA,eAAeI,gBAAf","sourcesContent":["import React, { Component } from 'react'\nimport CountryBasic from '../components/CountryBasic'\nimport WikiView from '../components/WikiView'\nimport countryNames from '../static/country-names'\n\n\nclass CountryContainer extends Component {\n  state = {\n    countryInfo: [],\n    wikiInfo: [],\n    countryInfoLoaded: false\n  }\n\n  findCountryName = () => {\n    const found = countryNames.filter(\n      function(country) {return country['alpha-3'] === this.props.match.params.countryId}\n    )\n    debugger\n  }\n\n  componentDidMount() {\n    this.findCountryName()\n    this.fetchData()\n  }\n\n  componentDidUpdate() {\n    this.fetchData()\n  }\n\n  fetchWikiData = () => {\n    if (this.props.wikiInfo.data) {\n\n    }\n      const countryName = this.state.countryInfo.name\n      fetch(`https://en.wikipedia.org/w/api.php?&origin=*&format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=${countryName}`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          wikiInfo: data\n        })\n      })\n  }\n\n  fetchData = () => {\n    const countryId = this.props.match.params.countryId\n    fetch(`https://restcountries.eu/rest/v2/alpha/${countryId}`).then(response => response.json()).then(data => {\n      this.setState({\n        countryInfo: data,\n        countryInfoLoaded: true\n      })\n    })\n  }\n\n  checkWikiInfo = () => {\n    if (this.state.wikiInfo !== []) {\n      return \"Wiki Info Loading\"\n    } else {\n      return this.state.wikiInfo.query.pages[Object.keys(this.state.wikiInfo.query.pages)[0]].extract\n    }\n  }\n\n  render() {\n    return(\n      <>\n      <CountryBasic countryInfo={this.state.countryInfo} fetchWikiData={this.fetchWikiData} />\n      <WikiView wikiInfo={this.state.wikiInfo}  />\n      </>\n    )\n  }\n}\n// TODO: make wikipedia component\n\nexport default CountryContainer\n"]},"metadata":{},"sourceType":"module"}