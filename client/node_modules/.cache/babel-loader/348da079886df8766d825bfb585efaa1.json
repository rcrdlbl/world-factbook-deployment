{"ast":null,"code":"/*\n * Buckminster Fuller’s spherical triangle transformation procedure\n *\n * Based on Robert W. Gray’s formulae published in “Exact Transformation Equations\n * For Fuller's World Map,” _Cartographica_, 32(3): 17-25 (1995).\n *\n * Implemented for D3.js by Philippe Rivière, 2018 (https://visionscarto.net/)\n *\n * To the extent possible under law, Philippe Rivière has waived all copyright\n * and related or neighboring rights to this implementation. (Public Domain.)\n */\nimport { abs, atan2, cos, epsilon, sin, sqrt } from \"./math\";\nimport { geoGnomonicRaw as gnomonicRaw } from \"d3-geo\";\nexport default function GrayFullerRaw() {\n  var SQRT_3 = sqrt(3); // Gray’s constants\n\n  var Z = sqrt(5 + 2 * sqrt(5)) / sqrt(15),\n      el = sqrt(8) / sqrt(5 + sqrt(5)),\n      dve = sqrt(3 + sqrt(5)) / sqrt(5 + sqrt(5));\n\n  var grayfuller = function grayfuller(lambda, phi) {\n    var cosPhi = cos(phi),\n        s = Z / (cosPhi * cos(lambda)),\n        x = cosPhi * sin(lambda) * s,\n        y = sin(phi) * s,\n        a1p = atan2(2 * y / SQRT_3 + el / 3 - el / 2, dve),\n        a2p = atan2(x - y / SQRT_3 + el / 3 - el / 2, dve),\n        a3p = atan2(el / 3 - x - y / SQRT_3 - el / 2, dve);\n    return [SQRT_3 * (a2p - a3p), 2 * a1p - a2p - a3p];\n  }; // Inverse approximation\n\n\n  grayfuller.invert = function (x, y) {\n    // if the point is out of the triangle, return\n    // something meaningless (but far away enough)\n    if (x * x + y * y > 5) return [0, 3];\n    var R = 2.9309936378128416,\n        p = gnomonicRaw.invert(x / R, y / R);\n    var j = 0;\n\n    do {\n      var f = grayfuller(p[0], p[1]),\n          dx = x - f[0],\n          dy = y - f[1];\n      p[0] += 0.2 * dx;\n      p[1] += 0.2 * dy;\n    } while (j++ < 30 && abs(dx) + abs(dy) > epsilon);\n\n    return p;\n  };\n\n  return grayfuller;\n}","map":null,"metadata":{},"sourceType":"module"}