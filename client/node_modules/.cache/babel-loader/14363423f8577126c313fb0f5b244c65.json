{"ast":null,"code":"import _classCallCheck from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/daniel/Development/world-factbook/src/components/MapView.js\";\nimport React, { Component } from 'react';\nimport geoData from '../static/world-50m.json';\nimport { ComposableMap, ZoomableGlobe, Geographies, Geography, Graticule } from \"react-simple-maps\";\nimport { geoPolyhedralWaterman } from 'd3-geo-polygon';\nimport { geoPath } from \"d3-geo\";\nvar wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\"\n};\n\nvar MapView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapView, _Component);\n\n  function MapView() {\n    var _this;\n\n    _classCallCheck(this, MapView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapView).call(this));\n    _this.state = {\n      center: [-20, 0],\n      zoom: 1,\n      currentCountry: null\n    };\n    _this.projection = _this.projection.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCountryClick = _this.handleCountryClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MapView, [{\n    key: \"handleCountryClick\",\n    value: function handleCountryClick(geography) {\n      console.log(geography);\n      var path = geoPath().projection(this.projection());\n      var centroid = this.projection().invert(path.centroid(geography));\n      this.setState({\n        center: centroid,\n        currentCountry: geography.properties.iso_a3\n      });\n    }\n  }, {\n    key: \"projection\",\n    value: function projection(width, height, config) {\n      return geoPolyhedralWaterman().rotate(this.state.center).scale(100);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: wrapperStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(ComposableMap, {\n        projection: \"orthographic\",\n        projectionConfig: {\n          scale: 300\n        },\n        width: 980,\n        height: 980,\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(ZoomableGlobe, {\n        center: [-20, 0],\n        disablePanning: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Geographies, {\n        geography: geoData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, function (geographies, projection) {\n        return geographies.map(function (geography, i) {\n          return geography.id !== \"ATA\" && React.createElement(Geography, {\n            key: i,\n            geography: geography,\n            projection: projection,\n            onClick: _this2.handleCountryClick,\n            style: {\n              default: {\n                fill: \"#000\",\n                stroke: \"#FFF\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#FFF\",\n                stroke: \"#000\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#FF5722\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          });\n        });\n      }), React.createElement(Graticule, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return MapView;\n}(Component);\n\nMapView.defaultProps = {\n  width: 980,\n  height: 551\n};\nexport default MapView;","map":{"version":3,"sources":["/Users/daniel/Development/world-factbook/src/components/MapView.js"],"names":["React","Component","geoData","ComposableMap","ZoomableGlobe","Geographies","Geography","Graticule","geoPolyhedralWaterman","geoPath","wrapperStyles","width","maxWidth","margin","MapView","state","center","zoom","currentCountry","projection","bind","handleCountryClick","geography","console","log","path","centroid","invert","setState","properties","iso_a3","height","config","rotate","scale","geographies","map","i","id","default","fill","stroke","strokeWidth","outline","hover","pressed","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport geoData from '../static/world-50m.json'\nimport {\n  ComposableMap,\n  ZoomableGlobe,\n  Geographies,\n  Geography,\n  Graticule,\n} from \"react-simple-maps\"\nimport { geoPolyhedralWaterman } from 'd3-geo-polygon'\nimport { geoPath } from \"d3-geo\"\n\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n}\n\nclass MapView extends Component {\n  static defaultProps = {\n    width: 980,\n    height: 551\n  }\n\n  constructor() {\n    super()\n    this.state = {\n      center: [-20, 0],\n      zoom: 1,\n      currentCountry: null\n    }\n    this.projection = this.projection.bind(this)\n    this.handleCountryClick = this.handleCountryClick.bind(this)\n  }\n\n\n  handleCountryClick(geography) {\n    console.log(geography)\n    const path = geoPath().projection(this.projection())\n    const centroid = this.projection().invert(path.centroid(geography))\n    this.setState({\n      center: centroid,\n      currentCountry: geography.properties.iso_a3\n    })\n  }\n\n\n  projection(width, height, config) {\n    return geoPolyhedralWaterman()\n      .rotate(this.state.center)\n      .scale(100)\n  }\n\n  render() {\n    return (\n      <div style={wrapperStyles}>\n        <ComposableMap\n          projection=\"orthographic\"\n          projectionConfig={{\n            scale: 300,\n          }}\n          width={980}\n          height={980}\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n          }}\n          >\n          <ZoomableGlobe center={[-20, 0]} disablePanning>\n            <Geographies geography={geoData}>\n              {(geographies, projection) => geographies.map((geography, i) => geography.id !== \"ATA\" && (\n                <Geography\n                  key={i}\n                  geography={geography}\n                  projection={projection}\n                  onClick={this.handleCountryClick}\n                  style={{\n                    default: {\n                      fill: \"#000\",\n                      stroke: \"#FFF\",\n                      strokeWidth: 0.75,\n                      outline: \"none\",\n                    },\n                    hover: {\n                      fill: \"#FFF\",\n                      stroke: \"#000\",\n                      strokeWidth: 0.75,\n                      outline: \"none\",\n                    },\n                    pressed: {\n                      fill: \"#FF5722\",\n                      stroke: \"#607D8B\",\n                      strokeWidth: 0.75,\n                      outline: \"none\",\n                    },\n                  }}\n                />\n              ))}\n            </Geographies>\n            <Graticule />\n          </ZoomableGlobe>\n        </ComposableMap>\n      </div>\n    )\n  }\n}\n\nexport default MapView\n"]},"metadata":{},"sourceType":"module"}