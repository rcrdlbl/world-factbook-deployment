{"ast":null,"code":"import { abs, acos, cos, epsilon, epsilon2 } from \"./math\";\nimport { cartesianCross, cartesianDot, cartesianEqual, cartesianNormalizeInPlace } from \"./cartesian\";\nexport function intersectSegment(from, to) {\n  this.from = from, this.to = to;\n  this.normal = cartesianCross(from, to);\n  this.fromNormal = cartesianCross(this.normal, from);\n  this.toNormal = cartesianCross(this.normal, to);\n  this.l = acos(cartesianDot(from, to));\n} // >> here a and b are segments processed by intersectSegment\n\nexport function intersect(a, b) {\n  var lc = cos(a.l + b.l) - epsilon;\n  if (cartesianDot(a.from, b.from) < lc || cartesianDot(a.from, b.to) < lc || cartesianDot(a.to, b.from) < lc || cartesianDot(a.to, b.to) < lc) return;\n  var axb = cartesianCross(a.normal, b.normal);\n  cartesianNormalizeInPlace(axb);\n  var a0 = cartesianDot(axb, a.fromNormal),\n      a1 = cartesianDot(axb, a.toNormal),\n      b0 = cartesianDot(axb, b.fromNormal),\n      b1 = cartesianDot(axb, b.toNormal); // check if the candidate lies on both segments\n  // or is almost equal to one of the four points\n\n  if (a0 > 0 && a1 < 0 && b0 > 0 && b1 < 0 || cartesianEqual(axb, a.from) || cartesianEqual(axb, a.to) || cartesianEqual(axb, b.from) || cartesianEqual(axb, b.to)) return axb; // same test for the antipode\n\n  axb[0] = -axb[0];\n  axb[1] = -axb[1];\n  axb[2] = -axb[2];\n  a0 = -a0;\n  a1 = -a1;\n  b0 = -b0;\n  b1 = -b1;\n  if (a0 > 0 && a1 < 0 && b0 > 0 && b1 < 0 || cartesianEqual(axb, a.from) || cartesianEqual(axb, a.to) || cartesianEqual(axb, b.from) || cartesianEqual(axb, b.to)) return axb;\n}\nexport function intersectPointOnLine(p, a) {\n  var a0 = cartesianDot(p, a.fromNormal),\n      a1 = cartesianDot(p, a.toNormal);\n  p = cartesianDot(p, a.normal);\n  return abs(p) < epsilon2 && (a0 > -epsilon2 && a1 < epsilon2 || a0 < epsilon2 && a1 > -epsilon2);\n}\nexport var intersectCoincident = {}; // todo: publicly expose d3.geoIntersect(segment0, segment1) ??\n// cf. https://github.com/d3/d3/commit/3dbdf87974dc2588c29db0533a8500ccddb25daa#diff-65daf69cea7d039d72c1eca7c13326b0","map":null,"metadata":{},"sourceType":"module"}