{"ast":null,"code":"import _classCallCheck from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/daniel/Development/world-factbook/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/daniel/Development/world-factbook/src/components/WorldMap.js\";\nimport React, { Component } from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from \"react-simple-maps\";\nimport { geoPath } from \"d3-geo\";\nimport { geoOrthographic } from \"d3-geo\";\n\nvar WorldMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WorldMap, _Component);\n\n  function WorldMap() {\n    var _this;\n\n    _classCallCheck(this, WorldMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WorldMap).call(this));\n    _this.state = {\n      center: [0, 0],\n      zoom: 1,\n      currentCountry: null\n    };\n    _this.projection = _this.projection.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleGeographyClick = _this.handleGeographyClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(WorldMap, [{\n    key: \"projection\",\n    value: function projection() {\n      return geoOrthographic().translate([this.props.width / 2, this.props.height / 2]).scale(160);\n    }\n  }, {\n    key: \"handleGeographyClick\",\n    value: function handleGeographyClick(geography) {\n      // geography looks something like this:\n      // { type: \"Feature\",  properties: {...}, geometry: {...} }\n      var path = geoPath().projection(this.projection());\n      var centroid = this.projection().invert(path.centroid(geography));\n      this.setState({\n        center: centroid,\n        zoom: 4,\n        currentCountry: geography.properties.iso_a3\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(ComposableMap, {\n        width: this.props.width,\n        height: this.props.height,\n        projection: this.projection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(ZoomableGroup, {\n        center: this.state.center,\n        zoom: this.state.zoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Geographies, {\n        geographyUrl: \"/static/world-50m.json\",\n        disableOptimization: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, function (geographies, projection) {\n        return geographies.map(function (geography, i) {\n          return React.createElement(Geography, {\n            key: i,\n            cacheId: \"path-\".concat(i),\n            geography: geography,\n            projection: projection,\n            onClick: _this2.handleGeographyClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          });\n        });\n      }))));\n    }\n  }]);\n\n  return WorldMap;\n}(Component);\n\nWorldMap.defaultProps = {\n  width: 800,\n  height: 800\n};\nexport default WorldMap;","map":{"version":3,"sources":["/Users/daniel/Development/world-factbook/src/components/WorldMap.js"],"names":["React","Component","ComposableMap","ZoomableGroup","Geographies","Geography","geoPath","geoOrthographic","WorldMap","state","center","zoom","currentCountry","projection","bind","handleGeographyClick","translate","props","width","height","scale","geography","path","centroid","invert","setState","properties","iso_a3","geographies","map","i","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,SAJF,QAKO,mBALP;AAMA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,eAAT,QAAgC,QAAhC;;IAEMC,Q;;;;;AAKJ,sBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAG,CAAH,CADG;AAEXC,MAAAA,IAAI,EAAE,CAFK;AAGXC,MAAAA,cAAc,EAAE;AAHL,KAAb;AAKA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BD,IAA1B,uDAA5B;AARY;AASb;;;;iCACY;AACX,aAAOP,eAAe,GACnBS,SADI,CACM,CAAC,KAAKC,KAAL,CAAWC,KAAX,GAAiB,CAAlB,EAAqB,KAAKD,KAAL,CAAWE,MAAX,GAAkB,CAAvC,CADN,EAEJC,KAFI,CAEE,GAFF,CAAP;AAGD;;;yCACoBC,S,EAAW;AAC9B;AACA;AACA,UAAMC,IAAI,GAAGhB,OAAO,GAAGO,UAAV,CAAqB,KAAKA,UAAL,EAArB,CAAb;AACA,UAAMU,QAAQ,GAAG,KAAKV,UAAL,GAAkBW,MAAlB,CAAyBF,IAAI,CAACC,QAAL,CAAcF,SAAd,CAAzB,CAAjB;AACA,WAAKI,QAAL,CAAc;AACZf,QAAAA,MAAM,EAAEa,QADI;AAEZZ,QAAAA,IAAI,EAAE,CAFM;AAGZC,QAAAA,cAAc,EAAES,SAAS,CAACK,UAAV,CAAqBC;AAHzB,OAAd;AAMD;;;6BACQ;AAAA;;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD;AACE,QAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC,KADpB;AAEE,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWE,MAFrB;AAGE,QAAA,UAAU,EAAE,KAAKN,UAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWC,MAAlC;AAA0C,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWE,IAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAa,QAAA,YAAY,EAAC,wBAA1B;AAAmD,QAAA,mBAAmB,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,UAACiB,WAAD,EAAcf,UAAd;AAAA,eACCe,WAAW,CAACC,GAAZ,CAAgB,UAACR,SAAD,EAAYS,CAAZ;AAAA,iBACd,oBAAC,SAAD;AACE,YAAA,GAAG,EAAEA,CADP;AAEE,YAAA,OAAO,iBAAUA,CAAV,CAFT;AAGE,YAAA,SAAS,EAAET,SAHb;AAIE,YAAA,UAAU,EAAER,UAJd;AAKE,YAAA,OAAO,EAAE,MAAI,CAACE,oBALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADc;AAAA,SAAhB,CADD;AAAA,OADH,CADF,CALF,CADF,CADF;AAyBD;;;;EA1DoBd,S;;AAAjBO,Q,CACGuB,Y,GAAe;AACpBb,EAAAA,KAAK,EAAE,GADa;AAEpBC,EAAAA,MAAM,EAAE;AAFY,C;AA4DxB,eAAeX,QAAf","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\"\nimport { geoPath } from \"d3-geo\"\nimport { geoOrthographic } from \"d3-geo\"\n\nclass WorldMap extends Component {\n  static defaultProps = {\n    width: 800,\n    height: 800,\n  }\n  constructor() {\n    super()\n    this.state = {\n      center: [0,0],\n      zoom: 1,\n      currentCountry: null,\n    }\n    this.projection = this.projection.bind(this)\n    this.handleGeographyClick = this.handleGeographyClick.bind(this)\n  }\n  projection() {\n    return geoOrthographic()\n      .translate([this.props.width/2, this.props.height/2])\n      .scale(160)\n  }\n  handleGeographyClick(geography) {\n    // geography looks something like this:\n    // { type: \"Feature\",  properties: {...}, geometry: {...} }\n    const path = geoPath().projection(this.projection())\n    const centroid = this.projection().invert(path.centroid(geography))\n    this.setState({\n      center: centroid,\n      zoom: 4,\n      currentCountry: geography.properties.iso_a3,\n    })\n\n  }\n  render() {\n    return (\n      <div>\n        <ComposableMap\n          width={this.props.width}\n          height={this.props.height}\n          projection={this.projection}\n          >\n          <ZoomableGroup center={this.state.center} zoom={this.state.zoom}>\n            <Geographies geographyUrl=\"/static/world-50m.json\" disableOptimization>\n              {(geographies, projection) =>\n                geographies.map((geography, i) => (\n                  <Geography\n                    key={i}\n                    cacheId={`path-${i}`}\n                    geography={geography}\n                    projection={projection}\n                    onClick={this.handleGeographyClick}\n                  />\n                ))\n              }\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    )\n  }\n}\n\nexport default WorldMap\n"]},"metadata":{},"sourceType":"module"}